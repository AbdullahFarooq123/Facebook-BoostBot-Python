# -*- coding: utf-8 -*-
import json

# Form implementation generated from reading ui file 'removeUsers.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog


class Ui_rempve_users(QDialog):
    def __init__(self, parent):
        super().__init__(parent)
        self.setupUi(self)

    def setupUi(self, rempve_users):
        rempve_users.setObjectName("rempve_users")
        rempve_users.resize(562, 437)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/facebook (3).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        rempve_users.setWindowIcon(icon)
        rempve_users.setStyleSheet("background:rgb(22, 33, 62)")
        self.verticalLayout = QtWidgets.QVBoxLayout(rempve_users)
        self.verticalLayout.setObjectName("verticalLayout")
        self.user_table_tbl = QtWidgets.QTableWidget(rempve_users)
        self.user_table_tbl.setStyleSheet("QTableWidget{\n"
                                          "background:rgb(255, 255, 255);\n"
                                          "border: 2px solid rgb(160, 132, 202);\n"
                                          "border-radius:5px;\n"
                                          "}")
        self.user_table_tbl.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.user_table_tbl.setAlternatingRowColors(True)
        self.user_table_tbl.setSelectionMode(QtWidgets.QAbstractItemView.NoSelection)
        self.user_table_tbl.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.user_table_tbl.setColumnCount(2)
        self.user_table_tbl.setObjectName("user_table_tbl")
        self.user_table_tbl.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.user_table_tbl.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.user_table_tbl.setHorizontalHeaderItem(1, item)
        self.user_table_tbl.horizontalHeader().setCascadingSectionResizes(True)
        self.user_table_tbl.horizontalHeader().setSortIndicatorShown(True)
        self.user_table_tbl.verticalHeader().setCascadingSectionResizes(True)
        self.user_table_tbl.verticalHeader().setSortIndicatorShown(True)
        self.user_table_tbl.verticalHeader().setVisible(False)
        header = self.user_table_tbl.horizontalHeader()
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
        self.verticalLayout.addWidget(self.user_table_tbl)
        self.widget = QtWidgets.QWidget(rempve_users)
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.select_all_btn = QtWidgets.QPushButton(self.widget)
        self.select_all_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.select_all_btn.setStyleSheet("QPushButton { \n"
                                          "    background:rgb(160, 132, 202); \n"
                                          "    color:white;\n"
                                          "    border: 2px solid rgb(164, 136, 207);\n"
                                          "      border-radius: 5px;\n"
                                          "    height:20px;\n"
                                          "    width:50px;\n"
                                          " }\n"
                                          "QPushButton:hover { \n"
                                          "    background:rgb(164, 136, 207);\n"
                                          "border: 2px solid rgb(160, 132, 202);\n"
                                          "      border-radius: 5px;\n"
                                          "}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/selection.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.select_all_btn.setIcon(icon1)
        self.select_all_btn.setObjectName("select_all_btn")
        self.horizontalLayout.addWidget(self.select_all_btn)
        self.unselect_all_btn = QtWidgets.QPushButton(self.widget)
        self.unselect_all_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.unselect_all_btn.setStyleSheet("QPushButton { \n"
                                            "    background:rgb(160, 132, 202); \n"
                                            "    color:white;\n"
                                            "    border: 2px solid rgb(164, 136, 207);\n"
                                            "      border-radius: 5px;\n"
                                            "    height:20px;\n"
                                            "    width:50px;\n"
                                            " }\n"
                                            "QPushButton:hover { \n"
                                            "    background:rgb(164, 136, 207);\n"
                                            "border: 2px solid rgb(160, 132, 202);\n"
                                            "      border-radius: 5px;\n"
                                            "}")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/eliminate.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.unselect_all_btn.setIcon(icon2)
        self.unselect_all_btn.setObjectName("unselect_all_btn")
        self.horizontalLayout.addWidget(self.unselect_all_btn)
        self.remove_btn = QtWidgets.QPushButton(self.widget)
        self.remove_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.remove_btn.setStyleSheet("QPushButton { \n"
                                      "    background:rgb(160, 132, 202); \n"
                                      "    color:white;\n"
                                      "    border: 2px solid rgb(164, 136, 207);\n"
                                      "      border-radius: 5px;\n"
                                      "    height:20px;\n"
                                      "    width:50px;\n"
                                      " }\n"
                                      "QPushButton:hover { \n"
                                      "    background:rgb(164, 136, 207);\n"
                                      "border: 2px solid rgb(160, 132, 202);\n"
                                      "      border-radius: 5px;\n"
                                      "}")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/remove-user.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.remove_btn.setIcon(icon3)
        self.remove_btn.setObjectName("import_btn")
        self.horizontalLayout.addWidget(self.remove_btn)
        self.save_btn = QtWidgets.QPushButton(self.widget)
        self.save_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.save_btn.setStyleSheet("QPushButton { \n"
                                    "    background:rgb(160, 132, 202); \n"
                                    "    color:white;\n"
                                    "    border: 2px solid rgb(164, 136, 207);\n"
                                    "      border-radius: 5px;\n"
                                    "    height:20px;\n"
                                    "    width:50px;\n"
                                    " }\n"
                                    "QPushButton:hover { \n"
                                    "    background:rgb(164, 136, 207);\n"
                                    "border: 2px solid rgb(160, 132, 202);\n"
                                    "      border-radius: 5px;\n"
                                    "}")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/diskette.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.save_btn.setIcon(icon4)
        self.save_btn.setObjectName("save_btn")
        self.horizontalLayout.addWidget(self.save_btn)
        self.verticalLayout.addWidget(self.widget)

        self.retranslateUi(rempve_users)
        QtCore.QMetaObject.connectSlotsByName(rempve_users)
        self.load_data()
        self.setup_buttons()

    def setup_buttons(self):
        self.select_all_btn.clicked.connect(self.select_all)
        self.unselect_all_btn.clicked.connect(self.unselect_all)
        self.remove_btn.clicked.connect(self.remove_users)
        self.save_btn.clicked.connect(self.save)

    def merge_data(self, new_data: dict) -> dict:
        try:
            previous_data = open('users.json', 'r')
            data = dict(json.load(previous_data))
            for d in new_data:
                new_data[d] = data[d]
            previous_data.close()
            return new_data
        except FileNotFoundError:
            return new_data

    def save(self):
        new_data = {}
        for row in range(0, self.user_table_tbl.rowCount()):
            col = self.user_table_tbl.item(row, 1).text()
            new_data[col] = []
        new_data = self.merge_data(new_data)
        with open('users.json', 'w') as file:
            file.write(json.dumps(new_data, indent=4))
            file.close()
        self.accept()

    def load_data(self):
        try:
            users = open('users.json', 'r')
            data = dict(json.load(users))
            row_index = self.user_table_tbl.rowCount()
            for row in range(0, row_index):
                self.user_table_tbl.removeRow(0)
            for key in data:
                for user_status in data[key]:
                    selected = user_status
                    if 'true' in selected:
                        row_index = self.user_table_tbl.rowCount()
                        self.user_table_tbl.insertRow(row_index)
                        check_box = QtWidgets.QTableWidgetItem()
                        check_box.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)
                        check_box.setCheckState(QtCore.Qt.Unchecked)
                        self.user_table_tbl.setItem(row_index, 0, check_box)
                        self.user_table_tbl.setItem(row_index, 1, QtWidgets.QTableWidgetItem(key))
        except FileNotFoundError:
            pass

    def select_all(self):
        # self.user_table_tbl.setCol
        for row in range(0, self.user_table_tbl.rowCount()):
            col = self.user_table_tbl.item(row, 0)
            col.setCheckState(QtCore.Qt.Checked)

    def unselect_all(self):
        # self.user_table_tbl.setCol
        for row in range(0, self.user_table_tbl.rowCount()):
            col = self.user_table_tbl.item(row, 0)
            col.setCheckState(QtCore.Qt.Unchecked)

    def remove_users(self):
        while True:
            found = False
            for row in range(0, self.user_table_tbl.rowCount()):
                col = self.user_table_tbl.item(row, 0)
                if col.checkState():
                    self.user_table_tbl.removeRow(row)
                    found = True
                    break
            if not found:
                break

    def retranslateUi(self, rempve_users):
        _translate = QtCore.QCoreApplication.translate
        rempve_users.setWindowTitle(_translate("rempve_users", "Remove Users"))
        item = self.user_table_tbl.horizontalHeaderItem(0)
        item.setText(_translate("rempve_users", "#"))
        item = self.user_table_tbl.horizontalHeaderItem(1)
        item.setText(_translate("rempve_users", "Link"))
        self.select_all_btn.setText(_translate("rempve_users", "Select All"))
        self.unselect_all_btn.setText(_translate("rempve_users", "Unselect All"))
        self.remove_btn.setText(_translate("rempve_users", "Remove"))
        self.save_btn.setText(_translate("rempve_users", "Save"))
        self.user_table_tbl.setSortingEnabled(True)

